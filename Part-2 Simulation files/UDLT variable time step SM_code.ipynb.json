{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calling various library\n",
    "import numpy as np\n",
    "from math import *\n",
    "from random import *\n",
    "import matplotlib.pyplot as plt\n",
    "from pylab import rcParams\n",
    "from datetime import datetime\n",
    "fig = plt.figure()\n",
    "time1=datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "                                                                   # no of points we want in the msd plot\n",
    "x_arr = np.loadtxt('x_arr_vts.txt')                                      #all elements are in micron\n",
    "y_arr = np.loadtxt('y_arr_vts.txt')                                       #all elements are in micron\n",
    "t_arr = np.loadtxt('dt_arr_vts.txt')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt_min=1e-8                                                                   #initial time step\n",
    "dt_max=1e4                                                                   #final time step in msd graph\n",
    "msd_xarr=[]                                                                    #mean squared x\n",
    "msd_yarr=[]                                                                    #mean squared y\n",
    "msd_rarr=[]                                                                    #r is the msd array\n",
    "mean_t_arr=[]                                                                  #dtarray for msd plot\n",
    "\n",
    "N = 30    \n",
    "timelaglog= np.logspace( np.log10(dt_min), np.log10(dt_max), num=N )                #nonzero points for msd plot(distributed linearly in log scale)\n",
    "counterarray=[]                                                                 #no of data averaging for particular dt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27788"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8.67038420e+02, 8.72937511e+02, 8.72939866e+02, ...,\n",
       "       9.99505224e+06, 9.99505224e+06, 1.00021623e+07])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00000000e-08, 2.59294380e-08, 6.72335754e-08, 1.74332882e-07,\n",
       "       4.52035366e-07, 1.17210230e-06, 3.03919538e-06, 7.88046282e-06,\n",
       "       2.04335972e-05, 5.29831691e-05, 1.37382380e-04, 3.56224789e-04,\n",
       "       9.23670857e-04, 2.39502662e-03, 6.21016942e-03, 1.61026203e-02,\n",
       "       4.17531894e-02, 1.08263673e-01, 2.80721620e-01, 7.27895384e-01,\n",
       "       1.88739182e+00, 4.89390092e+00, 1.26896100e+01, 3.29034456e+01,\n",
       "       8.53167852e+01, 2.21221629e+02, 5.73615251e+02, 1.48735211e+03,\n",
       "       3.85662042e+03, 1.00000000e+04])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "timelaglog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8.67038420e+02, 8.72937511e+02, 8.72939866e+02, ...,\n",
       "       9.99505224e+06, 9.99505224e+06, 1.00021623e+07])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start\n",
      "0\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'mean_t_arr' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-ae8f02f505f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mmsd_yarr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m                                                          \u001b[0;31m#msd for a particual dt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0mmsd_rarr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0mmean_t_arr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimelaglog\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtimelaglog\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m     \u001b[0mcounterarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'mean_t_arr' is not defined"
     ]
    }
   ],
   "source": [
    "from numba import jit\n",
    "@jit(nopython=True)\n",
    "for m in range(0,len(timelaglog)-1):\n",
    "    print(m)\n",
    "    r=0 \n",
    "    x=0\n",
    "    y=0 \n",
    "    count=0                                                                   #counter no of elements for data avraging for particular dt\n",
    "    for i in range(len(t_arr)):\n",
    "        for j in range(i+1,len(t_arr)):\n",
    "            timelag = t_arr[j]-t_arr[i]                                       #time difference between i'th and j'th elements\n",
    "            if timelag >= timelaglog[m] and timelag <= timelaglog[m+1]:\n",
    "                x = x+((x_arr[j]-x_arr[i])**2)\n",
    "                y = y+((y_arr[j]-y_arr[i])**2)\n",
    "                count = count+1\n",
    "    x=float(x/count)\n",
    "    y=float(y/count)\n",
    "    r=float(x+y) \n",
    "    msd_xarr.append(x)\n",
    "    msd_yarr.append(y)                                                          #msd for a particual dt\n",
    "    msd_rarr.append(r)\n",
    "    mean_t_arr.append(np.sqrt(timelaglog[m]*timelaglog[m+1]))\n",
    "    counterarray.append(count)\n",
    "    \n",
    "    \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#np.savetxt('msx.txt',msxarray)\n",
    "#np.savetxt('msy.txt',msyarray)\n",
    "#np.savetxt('msr.txt',msrarray)\n",
    "#np.savetxt('dtarrayformsd.txt',dtarraylog)\n",
    "#np.savetxt('counterarray.txt',counterarray)\n",
    "\n",
    "\n",
    "\n",
    "#body for log plotting\n",
    "msx=(msxarray)\n",
    "msy=(msyarray)\n",
    "msr=(msrarray)\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#rcParams ['figure.figsize']=5,5\n",
    "\n",
    "#plt.plot(dtarraylog,msx,'bo-')\n",
    "#plt.ylabel('$logmsx-micrometer^2$',size=20)\n",
    "#plt.xlabel('$logdt-seconds$',size=20)\n",
    "#plt.show()\n",
    "\n",
    "\n",
    "\n",
    "#plt.plot(dtarraylog,msy,'ro-')\n",
    "#plt.ylabel('$logmsy-micrometer^2$',size=20)\n",
    "#plt.xlabel('$logdt-seconds$',size=20)\n",
    "#plt.show()\n",
    "\n",
    "\n",
    "\n",
    "#fig.suptitle('mean shifted by sigma/2')\n",
    "plt.plot(dtarraylog,msr,'go-')\n",
    "plt.ylabel('msd (m$^2$)',size=20)\n",
    "plt.xlabel(r'$tau\\ \\(s)$', size =20)\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "\n",
    "#plt.xlim(0,dtarraylog[-1])\n",
    "#plt.ylim(0,msrarray[-1])\n",
    "#plt.show()\n",
    "#time2=datetime.now().strftime('%Y-%m-%d %H:%M:%S') # final time ending of the run time\n",
    "#print(time1,time2) \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "m$^2$\n"
     ]
    }
   ],
   "source": [
    "print('m$^2$')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
